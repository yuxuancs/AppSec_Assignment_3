Part 3.1:
I remove unsafe code from view.py that related to gift card information including the number of gift card sold, the number of gift card gifted, and the number of gift card used. Since these are high confidential data in business secrets, it should not leak out. So I remove the following code from view.py file:

graphs['b_counter'] = Counter('python_request_b_posts', 'The total number'  + ' of card buy posts.')
graphs['g_counter'] = Counter('python_request_g_posts', 'The total number'  + ' of card gift posts.')
graphs['u_counter'] = Counter('python_request_u_posts', 'The total number'  + ' of card use posts.')

Part 3.2:
Next by adding monition for 404 error, I add a new counter instead of using above unsafe code. By adding the following:
 
graphs['database_error_return_404'] = Counter('python_request_404_posts','The total number of 404 response.' ). Then I add "graphs['database_error_return_404'].inc()" to error 404 respond before it calls HttpResponse("ERROR: 404 Not Found.").


part 3.3:
Next, I run the "kubectl get configmaps" command to get the current ca.crt name from the current configuration named kube-root-ca.crt. Then, I use "kubectl edit configmap" to get the following file content.

Data
====
ca.crt:
----
-----BEGIN CERTIFICATE-----
MIIDBjCCAe6gAwIBAgIBATANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwptaW5p
a3ViZUNBMB4XDTIyMTEyMzIyMjY0OFoXDTMyMTEyMTIyMjY0OFowFTETMBEGA1UE
AxMKbWluaWt1YmVDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK1H
ThqyFzJ0/7zYNm1GrCoukvTJynD6VblcqX+OXgs/7OjKPaxl1xWPID3sZkNG2v0Y
yjvybHcXW67xcp7m/a5LidXbetZKBwQq0cWyFH3bbx8a3LINlJ2kGgK9lLfuIWgi
UKKpN5ntJiSqWD1gQnSgWs4Cu+qaieIIhqS5rKnrN/qL0kdt5Ug0dwn+3R48ARcL
bTWMxozJOjjRTjzVeUybhI+GIip2FlrCyRza61co4yylUODRPw9bFGHLg5O1zYSU
kBMI8A7qX330jjh7Zo5kH0/v7ve6az0bzyokbeSDk7+MdqM/sM2+b+iuWVLJdtXw
bdHk/qHjLVid5ijzAVUCAwEAAaNhMF8wDgYDVR0PAQH/BAQDAgKkMB0GA1UdJQQW
MBQGCCsGAQUFBwMCBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
BBRNtlY0cJ6uzJVOLILo2xoxXn60gTANBgkqhkiG9w0BAQsFAAOCAQEAFRsA9vgM
OKj0Z4fL2S1cO39jXXZTpUs8nWnTbmTktzxn8/bdb630mO+LGz/oWp1TYSa+Mtl0
xUWEtcL600MLRZK6jXvdg1T9hbGK9O/Gvj286tWXYyDAUwDjCsX/HQU2ZkBM14UY
wjknABnoZnqe63tp407RKAlVMlmem7Sg4eYp1k9kcndX93jneZY0jTYcRunwsjUO
X5w+SlxqYnxBOIcnGX/FmEO+RXmQra7hyOvGv4JaoNqM2Aw1r6K2ChL1sS1OiGNS
PQVgYV3vE/4oXhgPgS/6H5060bcqskiUYFzyrSw+jiVjkYw7mEoWRgGOWgxCAciq
jmD6YahhzhYJRA==
-----END CERTIFICATE-----

kind: ConfigMap
metadata:
  annotations:
    kubernetes.io/description: Contains a CA bundle that can be used to verify the
      kube-apiserver when using internal endpoints such as the internal service IP
      or kubernetes.default.svc. No other usage is guaranteed across distributions
      of Kubernetes clusters.
  creationTimestamp: "2022-11-24T22:27:28Z"
  name: kube-root-ca.crt
  namespace: default
  resourceVersion: "319"
  uid: d512ebaf-fc42-44d5-aa8b-4b752405bd56


Cited: https://devopscube.com/setup-prometheus-monitoring-on-kubernetes/
I follow the instruction from https://devopscube.com/setup-prometheus-monitoring-on-kubernetes/ to use the open resource with prometheus by adding the following code to config-map file:

    - job_name: django_monitor_job
      static_configs:
      - targets:
        - proxy-service:8080
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090

Command:
1.kubectl create namespace monitoring
2.kubectl create -f clusterRole.yaml
3.kubectl create -f config-map.yaml
4.kubectl create -f prometheus-deployment.yaml
5.kubectl get pods --namespace=monitoring

After these command we can find the pod named prometheus-deployment-74dc6c7466-k675h is running and can restart the service.

